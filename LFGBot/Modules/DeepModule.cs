using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Timers;
using Discord;
using Discord.Commands;
using Discord.Commands.Builders;
using Discord.WebSocket;
using LFGBot.Services;

namespace LFGBot.Modules
{
    public class DeepModule : ModuleBase<SocketCommandContext>
    {
        private readonly DeepService _deepService;

        public DeepModule(DeepService deepService)
        {
            _deepService = deepService;
        }

        /*[Command("info")]
        public async Task GetChannel()
        {
            /*var startup = Process.GetCurrentProcess().StartTime;
            var uptime = DateTime.Now - startup;
            
            var builder = new EmbedBuilder();

            builder.WithTitle("LFGBot Info");
            
            builder.AddField("Deep message channel", _deepService.Channel is null ? "unset" : $"{_deepService.Channel.Name}");
            builder.AddField("Deep message interval", _deepService.Interval + "ms");
            builder.AddField("Number of deep messages sent", "0");
            builder.AddField("Number of images sent", "0");
            builder.AddField("Uptime", uptime.ToString(@"dd\.hh\:mm\:ss"));
            // deep lfg - 756863887999238216
            builder.WithThumbnailUrl(Context.Client.GetUser(774183377724899379).GetAvatarUrl());
            builder.WithColor(Color.Purple);
            
            await Context.Channel.SendMessageAsync("", false, builder.Build());#1#
        }
        */

        [Command("start")]
        [RequireOwner]
        public async Task Start()
        {
            _deepService.ToggleTimer(true);
            await Context.Channel.SendMessageAsync("Deep message posting resumed!");
        }
        
        [Command("stop")]
        [RequireOwner]
        public async Task Stop()
        {
            _deepService.ToggleTimer(false);
            await Context.Channel.SendMessageAsync("Deep message posting paused.");
        }

        [Command("deep")]
        [Summary("Sends a message generated by the GPT-2 DeepLFG Bot")]
        [RequireOwner]
        public async Task DeepMessage()
        {
            _deepService.QueueMessage(true);
            await _deepService.SendDeepMessage();
        }
    }
}