using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Timers;
using Discord;
using Discord.Commands;
using Discord.Commands.Builders;
using Discord.WebSocket;
using LFGBot.Services;

namespace LFGBot.Modules
{
    public class DeepModule : ModuleBase<SocketCommandContext>
    {
        private readonly DeepService _deepService;

        public DeepModule(DeepService deepService)
        {
            _deepService = deepService;
        }

        [Command("setchannel")]
        [RequireOwner]
        public async Task SetChannel(ISocketMessageChannel channel = null)
        {
            if (channel != null)
                _deepService.Channel = channel;
            else
                _deepService.Channel = Context.Channel;
            await Context.Channel.SendMessageAsync($"Bot message channel set to {channel.Name}");
        }

        [Command("info")]
        public async Task GetChannel()
        {
            var startup = Process.GetCurrentProcess().StartTime;
            var uptime = DateTime.Now - startup;
            
            var builder = new EmbedBuilder();

            builder.WithTitle("LFGBot Info");
            
            builder.AddField("Deep message channel", _deepService.Channel is null ? "unset" : $"{_deepService.Channel.Name}");
            builder.AddField("Deep message interval", _deepService.Interval + "ms");
            builder.AddField("Number of deep messages sent", "0");
            builder.AddField("Number of images sent", "0");
            builder.AddField("Uptime", uptime.ToString(@"dd\.hh\:mm\:ss"));
            
            builder.WithThumbnailUrl(Context.Client.GetUser(756863887999238216).GetAvatarUrl());
            builder.WithColor(Color.Purple);
            
            await Context.Channel.SendMessageAsync("", false, builder.Build());
        }

        [Command("start")]
        [RequireOwner]
        public async Task Start()
        {
            _deepService.ToggleTimer(true);
            await Context.Channel.SendMessageAsync("Deep message posting resumed!");
        }
        
        [Command("stop")]
        [RequireOwner]
        public async Task Stop()
        {
            _deepService.ToggleTimer(false);
            await Context.Channel.SendMessageAsync("Deep message posting paused.");
        }

        [Command("interval")]
        [RequireOwner]
        public async Task MessageInterval(int interval)
        {
            _deepService.Interval = interval;
            await Context.Channel.SendMessageAsync($"Message interval set to {interval}ms");
        }
        
        [Command("deep")]
        [Summary("Sends a message generated by the GPT-2 DeepLFG Bot")]
        [RequireOwner]
        public async Task DeepMessage()
        {
            var msg = _deepService.GetMessage();

            var finalMsg = "";
            
            for (var i = 0; i < msg.Length; i++)
            {
                var character = msg[i];

                if (character == ':')
                {
                    var emojiString = "";

                    var found = false;
                    
                    for (var j = i + 1; j < msg.Length; j++)
                    {
                        if (msg[j] == ':' && j > i + 1)
                        {
                            var emote = Context.Guild.Emotes.FirstOrDefault(x => x.Name == emojiString);
                            if (emote != null)
                            {
                                finalMsg += $"<:{emote.Name}:{emote.Id}>";
                                i = j;
                                found = true;
                            }

                            break;
                        }

                        emojiString += msg[j];
                    }
                    if (!found)
                        finalMsg += character;
                }
                else
                {
                    finalMsg += character;
                }
            }

            finalMsg += "\n â€‹";
            
            await _deepService.Channel.SendMessageAsync(finalMsg);
        }
    }
}